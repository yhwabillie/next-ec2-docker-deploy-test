name: Nextjs standalone CI/CD

on:
  push:
    branches: [main]

env:
  DOCKER_CONTAINER: next-ec2-docker-deploy-test-cicd
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/next-ec2-docker-deploy-test
  VERSION: ${{ github.sha }}
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

jobs:
  build:
    name: Build Job
    runs-on: ubuntu-latest
    steps:
      - name: Github Checkout
        uses: actions/checkout@v4

      # # yarn v4를 위해 corepack 설정
      # - name: Enable Corepack
      #   run: corepack enable

      # # node 버전 설치
      # - name: Setup Node 20.11.1
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: 20.11.1

      # # yarn 버전 설정
      # - name: Set yarn version
      #   id: set-version
      #   run: |
      #     yarn set version 4.3.1

      # # yarn 의존성 캐시 경로 가져오기
      # - name: Get Yarn Cache Directory Path
      #   id: yarn-cache-dir-path
      #   run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      # # .next 폴더 내부에 빌드 cache폴더 캐싱하기
      # - name: Cache Nextjs Build
      #   uses: actions/cache@v3
      #   id: next-cache
      #   with:
      #     # npm cache files are stored in `~/.npm` on Linux/macOS
      #     path: |
      #       ${{ steps.yarn-cache-dir-path.outputs.dir }}
      #       ${{ github.workspace }}/.next/cache

      #     # Generate a new cache whenever packages or source files change.
      #     key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}

      #     # If source files changed but packages didn't, rebuild from a prior cache.
      #     restore-keys: |
      #       ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-

      - name: .next cache directory [Before Build]
        continue-on-error: true
        run: ls -la ${{ github.workspace }}/.next/cache

      # buildx(멀티 플랫폼 빌드 라이브러리, 개발 로컬 M1 -> EC2 리눅스 동일한 이미지 생성 플러그인)
      - name: SetUp Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      # 도커 레이어 캐싱
      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max # 여기서 gha 는 Guthub Actions 용 캐시를 의미합니다.

      # .next > cache 캐싱
      - name: Exporting nextjs build cache
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          target: next-cache
          outputs: type=local,dest=.
          push: false
          tags: ${{ env.DOCKER_IMAGE }}:latest
          cache-from: type=gha

      - name: .next cache directory [After Build]
        continue-on-error: true
        run: ls -la ${{ github.workspace }}/.next/cache

  deploy:
    needs: build
    name: Deploy Job
    runs-on: [self-hosted, label-go]
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Docker RUN
        run: |
          docker stop ${{ env.DOCKER_CONTAINER }} && docker rm ${{ env.DOCKER_CONTAINER }} && docker rmi ${{ env.DOCKER_IMAGE }}:latest
          docker run -d -p 80:3000 --name ${{ env.DOCKER_CONTAINER }} --restart always ${{ env.DOCKER_IMAGE }}:latest
