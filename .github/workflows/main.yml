name: CI/CD nextjs standalone

# 트리거를 수행할 브랜치 지정
on:
  push:
    branches: [main]

# 환경변수
env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/next-ec2-docker-deploy-test
  DOCKER_IMAGE_VERSION: ${{ github.sha }}
  NAME: go_cicd
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

jobs:
  # 빌드 job
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # Github 체크아웃하여 runner 서버로 레포 다운로드
      - name: Github Checkout
        uses: actions/checkout@v3

      # yarn v4를 위해 corepack 설정
      - name: Enable Corepack
        run: corepack enable

      # node 버전 설치
      - name: Setup Node 20.11.1
        uses: actions/setup-node@v4
        with:
          node-version: 20.11.1

      # yarn 버전 설정
      - name: Set yarn version
        id: set-version
        run: |
          yarn set version 4.3.1

      # yarn 의존성 캐시 경로 가져오기
      - name: Get Yarn Cache Directory Path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      # .next 캐시 경로 가져오기 (nextjs 빌드 결과물)
      - name: Get Yarn Cache Directory Path
        id: next-cache-dir-path
        run: echo "dir=${{ github.workspace }}/.next/cache" >> $GITHUB_OUTPUT

      # yarn & .next 캐싱 -> 도커에 전달할 거
      - name: Yarn & Next Cache
        uses: actions/cache@v4
        id: yarn-next-cache
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            ${{ steps.next-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}-

      # 빌드전 .next 캐싱확인
      - name: print nextjs cache dir before build
        continue-on-error: true
        run: ls -la ${{ steps.next-cache-dir-path.outputs.dir }}

      # Set Up buildx
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      # Github 컨테이너 레지스트리에 로그인
      - name: Login to Github Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.YHWALOG_TOKEN }}

      # Github 컨테이너 레지스트리로 이미지 빌드, 레지스트리로 이미지 푸시
      - name: Build & Push
        id: docker_build_push
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILDKIT: 1
          BUILDKIT_PROGRESS: plain
        with:
          context: .
          file: Dockerfile
          target: next-cache
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest

          # 얘들은 뭐지..?
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=local,dest=.
          # 얘들은 뭐지..?

      # 빌드 후 .next 캐싱확인
      - name: print nextjs cache dir after build
        continue-on-error: true
        run: ls -la ${{ steps.next-cache-dir-path.outputs.dir }}

  # 배포 job
  deploy:
    # 빌드 job이 끝난후 실행
    needs: build
    name: Deploy
    runs-on: [self-hosted, label-go]
    steps:
      - name: Login to Github Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.YHWALOG_TOKEN }}
      - name: Docker Run
        run: |
          docker stop ${{ env.NAME }} && docker rm ${{ env.NAME }} && docker rmi ${{ env.DOCKER_IMAGE }}:latest
          docker run -d -p 80:3000 --name go_cicd --restart always ${{ env.DOCKER_IMAGE }}:latest
